"""
Omfattande tester f√∂r st√§mpelsymbolhantering
"""

import json
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from django.http import JsonResponse
from axes.models import (
    Stamp,
    StampSymbol,
    Manufacturer,
)


class StampSymbolAPITest(TestCase):
    """Tester f√∂r symbol-API"""

    def setUp(self):
        """S√§tt upp testdata"""
        self.client = Client()
        self.user = User.objects.create_user(
            username="testuser", password="testpass123", is_staff=True
        )

        # Skapa testinst√§llningar
        self.crown_symbol = StampSymbol.objects.create(
            name="Krona",
            symbol_type="crown",
            pictogram="üëë",
            description="Kunglig krona",
            is_predefined=True,
        )
        self.star_symbol = StampSymbol.objects.create(
            name="Stj√§rna",
            symbol_type="star",
            pictogram="‚≠ê",
            description="Stj√§rnsymbol",
            is_predefined=False,
        )

    def test_stamp_symbols_api_get_all(self):
        """Testa API f√∂r att h√§mta alla symboler"""
        url = reverse("stamp_symbols_api")
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response["Content-Type"], "application/json")

        data = json.loads(response.content)
        self.assertIsInstance(data, list)
        # Ska √•tminstone inneh√•lla de tv√• nyskapade
        symbol_names = [symbol["name"] for symbol in data]
        self.assertIn("Krona", symbol_names)
        self.assertIn("Stj√§rna", symbol_names)

    def test_stamp_symbols_api_search_filter(self):
        """Testa API med s√∂kfilter"""
        url = reverse("stamp_symbols_api") + "?search=Krona"
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        data = json.loads(response.content)

        # Det kan finnas f√∂rifyllda symboler ‚Äî s√§kerst√§ll att Krona finns och att alla match √§r Krona
        self.assertGreaterEqual(len(data), 1)
        self.assertTrue(all(item["name"] == "Krona" for item in data))
        self.assertEqual(data[0]["symbol_type"], "crown")
        self.assertEqual(data[0]["pictogram"], "üëë")

    def test_stamp_symbols_api_type_filter(self):
        """Testa API med typfilter"""
        url = reverse("stamp_symbols_api") + "?type=star"
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        data = json.loads(response.content)

        # Kan vara fler √§n en om f√∂rifyllda finns; s√§kerst√§ll att Stj√§rna ing√•r och alla √§r typ star
        self.assertGreaterEqual(len(data), 1)
        names = [item["name"] for item in data]
        self.assertIn("Stj√§rna", names)
        self.assertEqual(data[0]["symbol_type"], "star")

    def test_stamp_symbols_api_predefined_filter(self):
        """Testa API med f√∂rdefinierad-filter"""
        url = reverse("stamp_symbols_api") + "?predefined=true"
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        data = json.loads(response.content)

        # F√∂rdefinierade kan vara flera; kontrollera att alla markerade som predefined och att Krona finns
        self.assertGreaterEqual(len(data), 1)
        self.assertTrue(all(item["is_predefined"] for item in data))
        names = [item["name"] for item in data]
        self.assertIn("Krona", names)

    def test_stamp_symbols_api_combined_filters(self):
        """Testa API med kombinerade filter"""
        url = reverse("stamp_symbols_api") + "?search=Stj√§rna&predefined=false"
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        data = json.loads(response.content)

        # Icke-f√∂rdefinierade: √•tminstone v√•r nyskapade Stj√§rna
        self.assertGreaterEqual(len(data), 1)
        names = [item["name"] for item in data]
        self.assertIn("Stj√§rna", names)
        self.assertTrue(any(not item["is_predefined"] for item in data))

    def test_stamp_symbols_api_empty_result(self):
        """Testa API n√§r inga symboler matchar"""
        url = reverse("stamp_symbols_api") + "?search=NonExistentSymbol"
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        data = json.loads(response.content)
        self.assertEqual(len(data), 0)


class StampSymbolViewsTest(TestCase):
    """Tester f√∂r symbol-relaterade views"""

    def setUp(self):
        """S√§tt upp testdata"""
        self.client = Client()
        self.user = User.objects.create_user(
            username="testuser", password="testpass123", is_staff=True
        )

        self.symbol = StampSymbol.objects.create(
            name="Test Symbol",
            symbol_type="crown",
            pictogram="üëë",
            description="Test beskrivning",
        )

    def test_stamp_symbols_manage_view_get(self):
        """Testa symbolhantering-vy"""
        self.client.login(username="testuser", password="testpass123")

        url = reverse("stamp_symbols_manage")
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Hantera st√§mpelsymboler")
        self.assertContains(response, "Test Symbol")

        # Kontrollera att symboler finns i context
        symbols = response.context["symbols"]
        self.assertIn(self.symbol, symbols)

    def test_stamp_symbols_manage_requires_login(self):
        """Testa att symbolhantering kr√§ver inloggning"""
        url = reverse("stamp_symbols_manage")
        response = self.client.get(url)

        self.assertEqual(response.status_code, 302)
        self.assertIn("/login/", response.url)

    def test_stamp_symbol_update_view_get(self):
        """Testa symboluppdatering-vy GET"""
        self.client.login(username="testuser", password="testpass123")

        url = reverse("stamp_symbol_update", kwargs={"symbol_id": self.symbol.id})
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Redigera symbol")
        self.assertContains(response, "Test Symbol")

    def test_stamp_symbol_update_view_post_valid(self):
        """Testa framg√•ngsrik symboluppdatering"""
        self.client.login(username="testuser", password="testpass123")

        url = reverse("stamp_symbol_update", kwargs={"symbol_id": self.symbol.id})
        data = {
            "name": "Uppdaterad Symbol",
            "symbol_type": "star",
            "pictogram": "‚≠ê",
            "description": "Uppdaterad beskrivning",
        }

        response = self.client.post(url, data)

        self.assertEqual(response.status_code, 302)

        # Verifiera att symbolen uppdaterades
        self.symbol.refresh_from_db()
        self.assertEqual(self.symbol.name, "Uppdaterad Symbol")
        self.assertEqual(self.symbol.symbol_type, "star")
        self.assertEqual(self.symbol.pictogram, "‚≠ê")
        self.assertEqual(self.symbol.description, "Uppdaterad beskrivning")

    def test_stamp_symbol_update_view_post_invalid(self):
        """Testa symboluppdatering med ogiltig data"""
        self.client.login(username="testuser", password="testpass123")

        url = reverse("stamp_symbol_update", kwargs={"symbol_id": self.symbol.id})
        data = {
            "name": "",  # Tomt namn
            "symbol_type": "invalid_type",
            "pictogram": "‚≠ê",
        }

        response = self.client.post(url, data)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "error")

        # Verifiera att symbolen inte √§ndrades
        self.symbol.refresh_from_db()
        self.assertEqual(self.symbol.name, "Test Symbol")

    def test_stamp_symbol_delete_view_get(self):
        """Testa bekr√§ftelsesida f√∂r symbolborttagning"""
        self.client.login(username="testuser", password="testpass123")

        url = reverse("stamp_symbol_delete", kwargs={"symbol_id": self.symbol.id})
        response = self.client.get(url)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Bekr√§fta borttagning")
        self.assertContains(response, "Test Symbol")

    def test_stamp_symbol_delete_view_post(self):
        """Testa faktisk symbolborttagning"""
        self.client.login(username="testuser", password="testpass123")

        url = reverse("stamp_symbol_delete", kwargs={"symbol_id": self.symbol.id})
        response = self.client.post(url)

        self.assertEqual(response.status_code, 302)
        self.assertEqual(StampSymbol.objects.filter(id=self.symbol.id).count(), 0)

    def test_stamp_symbol_delete_predefined_protection(self):
        """Testa att f√∂rdefinierade symboler skyddas fr√•n borttagning"""
        # Skapa f√∂rdefinierad symbol
        predefined_symbol = StampSymbol.objects.create(
            name="F√∂rdefinierad", symbol_type="crown", is_predefined=True
        )

        self.client.login(username="testuser", password="testpass123")

        url = reverse("stamp_symbol_delete", kwargs={"symbol_id": predefined_symbol.id})
        response = self.client.post(url)

        # Borde inte kunna tas bort
        self.assertEqual(response.status_code, 403)
        self.assertEqual(StampSymbol.objects.filter(id=predefined_symbol.id).count(), 1)

    def test_stamp_symbol_access_permissions(self):
        """Testa √•tkomstbeh√∂righeter f√∂r symbolhantering"""
        # Testa utan inloggning
        urls_requiring_login = [
            reverse("stamp_symbols_manage"),
            reverse("stamp_symbol_update", kwargs={"symbol_id": self.symbol.id}),
            reverse("stamp_symbol_delete", kwargs={"symbol_id": self.symbol.id}),
        ]

        for url in urls_requiring_login:
            response = self.client.get(url)
            self.assertEqual(response.status_code, 302)
            self.assertIn("/login/", response.url)


class StampSymbolIntegrationTest(TestCase):
    """Integrationstester f√∂r symbolhantering"""

    def setUp(self):
        """S√§tt upp testdata"""
        self.client = Client()
        self.user = User.objects.create_user(
            username="testuser", password="testpass123", is_staff=True
        )
        self.manufacturer = Manufacturer.objects.create(
            name="Test Tillverkare", country_code="SE"
        )

    def test_symbol_creation_workflow(self):
        """Testa komplett arbetsfl√∂de f√∂r symbolskapande"""
        self.client.login(username="testuser", password="testpass123")

        # 1. G√• till symbolhantering
        manage_url = reverse("stamp_symbols_manage")
        response = self.client.get(manage_url)
        self.assertEqual(response.status_code, 200)

        # 2. Skapa ny symbol via AJAX eller form
        create_data = {
            "name": "Ny Symbol",
            "symbol_type": "heart",
            "pictogram": "‚ù§Ô∏è",
            "description": "Hj√§rtsymbol",
        }

        # Simulera symbolskapande
        symbol = StampSymbol.objects.create(**create_data)

        # 3. Verifiera att symbolen syns i listan
        response = self.client.get(manage_url)
        self.assertContains(response, "Ny Symbol")
        self.assertContains(response, "‚ù§Ô∏è")

        # 4. Uppdatera symbolen
        update_url = reverse("stamp_symbol_update", kwargs={"symbol_id": symbol.id})
        update_data = {
            "name": "Uppdaterad Hj√§rtsymbol",
            "symbol_type": "heart",
            "pictogram": "üíñ",
            "description": "F√∂rb√§ttrad hj√§rtsymbol",
        }
        response = self.client.post(update_url, update_data)
        self.assertEqual(response.status_code, 302)

        symbol.refresh_from_db()
        self.assertEqual(symbol.name, "Uppdaterad Hj√§rtsymbol")
        self.assertEqual(symbol.pictogram, "üíñ")

    def test_symbol_api_integration(self):
        """Testa integration mellan API och symbol-views"""
        # Skapa olika typer av symboler
        symbols_data = [
            {"name": "Krona A", "symbol_type": "crown", "pictogram": "üëë"},
            {"name": "Krona B", "symbol_type": "crown", "pictogram": "‚ôî"},
            {"name": "Stj√§rna A", "symbol_type": "star", "pictogram": "‚≠ê"},
            {"name": "Hj√§rta", "symbol_type": "heart", "pictogram": "‚ù§Ô∏è"},
        ]

        created_symbols = []
        for data in symbols_data:
            symbol = StampSymbol.objects.create(**data)
            created_symbols.append(symbol)

        # Testa API-anrop
        api_url = reverse("stamp_symbols_api")

        # H√§mta alla
        response = self.client.get(api_url)
        data = json.loads(response.content)
        # Kan vara fler √§n 4 om fixtures/predef finns; s√§kerst√§ll att v√•ra 4 ing√•r
        self.assertGreaterEqual(len(data), 4)

        # Filtrera p√• typ
        response = self.client.get(api_url + "?type=crown")
        data = json.loads(response.content)
        self.assertEqual(len(data), 2)
        crown_names = [item["name"] for item in data]
        self.assertIn("Krona A", crown_names)
        self.assertIn("Krona B", crown_names)

        # S√∂k p√• namn (kan matcha fler √§n en i milj√∂er med f√∂rdefinierade)
        response = self.client.get(api_url + "?search=Stj√§rna")
        data = json.loads(response.content)
        self.assertGreaterEqual(len(data), 1)
        names = [item["name"] for item in data]
        self.assertIn("Stj√§rna A", names)

    def test_symbol_usage_with_stamps(self):
        """Testa anv√§ndning av symboler med st√§mplar"""
        # Skapa symboler
        crown_symbol = StampSymbol.objects.create(
            name="Kunglig Krona", symbol_type="crown", pictogram="üëë"
        )
        star_symbol = StampSymbol.objects.create(
            name="Femuddig Stj√§rna", symbol_type="star", pictogram="‚≠ê"
        )

        # Skapa st√§mplar som anv√§nder symboler
        stamp1 = Stamp.objects.create(
            name="ST√ÑMPEL MED KRONA",
            manufacturer=self.manufacturer,
            stamp_type="symbol",
        )
        stamp2 = Stamp.objects.create(
            name="ST√ÑMPEL MED STJ√ÑRNA",
            manufacturer=self.manufacturer,
            stamp_type="symbol",
        )

        # I en riktig implementation skulle symbolerna kopplas till st√§mplar
        # via en ManyToMany-relation eller liknande

        # Testa att symbolerna finns tillg√§ngliga f√∂r st√§mplar
        api_url = reverse("stamp_symbols_api")
        response = self.client.get(api_url)
        data = json.loads(response.content)

        symbol_names = [item["name"] for item in data]
        self.assertIn(crown_symbol.name, symbol_names)
        self.assertIn(star_symbol.name, symbol_names)

        # Verifiera att st√§mplarna skapades korrekt
        self.assertEqual(stamp1.stamp_type, "symbol")
        self.assertEqual(stamp2.stamp_type, "symbol")

    def test_symbol_type_consistency(self):
        """Testa konsistens i symboltyper"""
        # Definiera alla giltiga symboltyper
        valid_types = [
            "crown",
            "cannon",
            "star",
            "cross",
            "shield",
            "anchor",
            "flower",
            "leaf",
            "arrow",
            "circle",
            "square",
            "triangle",
            "diamond",
            "heart",
            "other",
        ]

        # Skapa symboler f√∂r alla typer
        created_symbols = []
        for symbol_type in valid_types:
            symbol = StampSymbol.objects.create(
                name=f"Test {symbol_type}", symbol_type=symbol_type, pictogram="üîò"
            )
            created_symbols.append(symbol)

        # Testa API-filtrering f√∂r alla typer
        api_url = reverse("stamp_symbols_api")
        for symbol_type in valid_types:
            response = self.client.get(api_url + f"?type={symbol_type}")
            self.assertEqual(response.status_code, 200)

            data = json.loads(response.content)
            # Minst en av v√•r skapade typ
            self.assertGreaterEqual(len(data), 1)
            self.assertTrue(all(item["symbol_type"] == symbol_type for item in data))

    def test_symbol_pictogram_unicode_handling(self):
        """Testa hantering av Unicode-piktogram"""
        unicode_symbols = [
            ("üëë", "crown"),
            ("‚≠ê", "star"),
            ("‚ù§Ô∏è", "heart"),
            ("üî∫", "triangle"),
            ("üîµ", "circle"),
            ("üó°Ô∏è", "arrow"),
        ]

        for pictogram, symbol_type in unicode_symbols:
            symbol = StampSymbol.objects.create(
                name=f"Test {pictogram}", symbol_type=symbol_type, pictogram=pictogram
            )

            # Testa att piktogrammet sparas och h√§mtas korrekt
            symbol.refresh_from_db()
            self.assertEqual(symbol.pictogram, pictogram)

            # Testa via API
            api_url = reverse("stamp_symbols_api") + f"?search={symbol.name}"
            response = self.client.get(api_url)
            data = json.loads(response.content)

            self.assertEqual(len(data), 1)
            self.assertEqual(data[0]["pictogram"], pictogram)

    def test_predefined_symbols_management(self):
        """Testa hantering av f√∂rdefinierade symboler"""
        # Skapa f√∂rdefinierade symboler
        predefined_symbols = [
            {"name": "Svensk Krona", "symbol_type": "crown", "pictogram": "üëë"},
            {"name": "Kanonkula", "symbol_type": "cannon", "pictogram": "‚ö´"},
            {"name": "Nordstj√§rnan", "symbol_type": "star", "pictogram": "‚≠ê"},
        ]

        created_predefined = []
        for data in predefined_symbols:
            data["is_predefined"] = True
            symbol = StampSymbol.objects.create(**data)
            created_predefined.append(symbol)

        # Skapa anv√§ndardefinierade symboler
        user_symbol = StampSymbol.objects.create(
            name="Min Symbol", symbol_type="heart", pictogram="üíñ", is_predefined=False
        )

        # Testa API-filtrering p√• f√∂rdefinierade
        api_url = reverse("stamp_symbols_api")

        response = self.client.get(api_url + "?predefined=true")
        data = json.loads(response.content)
        # Minst v√•ra tre f√∂rdefinierade ska finnas
        self.assertGreaterEqual(len(data), 3)
        for item in data:
            self.assertTrue(item["is_predefined"])

        response = self.client.get(api_url + "?predefined=false")
        data = json.loads(response.content)
        # Minst en (v√•r) icke-f√∂rdefinierad ska finnas
        self.assertGreaterEqual(len(data), 1)
        names = [item["name"] for item in data]
        self.assertIn("Min Symbol", names)
        self.assertTrue(any(not item["is_predefined"] for item in data))

        # Testa att f√∂rdefinierade symboler skyddas
        self.client.login(username="testuser", password="testpass123")

        predefined = created_predefined[0]
        delete_url = reverse("stamp_symbol_delete", kwargs={"symbol_id": predefined.id})
        response = self.client.post(delete_url)

        # Borde inte kunna tas bort
        self.assertEqual(response.status_code, 403)
        self.assertTrue(StampSymbol.objects.filter(id=predefined.id).exists())

        # Men anv√§ndardefinierade borde kunna tas bort
        delete_url = reverse(
            "stamp_symbol_delete", kwargs={"symbol_id": user_symbol.id}
        )
        response = self.client.post(delete_url)
        self.assertEqual(response.status_code, 302)
        self.assertFalse(StampSymbol.objects.filter(id=user_symbol.id).exists())
