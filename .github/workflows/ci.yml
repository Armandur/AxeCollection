name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Försök installera med ökande timeout och retries
        pip install --retries 5 --timeout 600 -r requirements.txt || pip install --retries 3 --timeout 300 -r requirements.txt
        pip install coverage
    
    - name: Run linting
      run: |
        python -m flake8 axes/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 axes/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run code formatting check
      run: |
        python -m black --check axes/
    
    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: AxeCollection.settings
      run: |
        python manage.py collectstatic --noinput
        python manage.py migrate
        python -m coverage run --source='.' manage.py test
        python -m coverage report
        python -m coverage xml
        python -m coverage html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  security:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Försök installera med ökande timeout och retries
        pip install --retries 5 --timeout 600 -r requirements.txt || pip install --retries 3 --timeout 300 -r requirements.txt
    
    - name: Run security checks
      run: |
        # Install security tools
        pip install bandit safety
        
        # Run bandit security checks
        bandit -r axes/ -f json -o bandit-report.json || true
        
        # Run safety checks for known vulnerabilities
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Determine Docker tags
      id: docker_tags
      run: |
        # Rensa branch-namn för Docker-taggar (ersätt / med -)
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_NAME_CLEAN=$(echo $BRANCH_NAME | sed 's/\//-/g')
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        
        # Bestäm taggar baserat på branch
        if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
          # Endast :latest på main (ingen :main)
          echo "tags=latest" >> $GITHUB_OUTPUT
          echo "is_main=true" >> $GITHUB_OUTPUT
        else
          # Övriga branches: endast branchnamnet
          echo "tags=$BRANCH_NAME_CLEAN" >> $GITHUB_OUTPUT
          echo "is_main=false" >> $GITHUB_OUTPUT
        fi
        
        # Lägg till SHA-tag för alla builds
        echo "sha_tag=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "full_sha_tag=$GITHUB_SHA" >> $GITHUB_OUTPUT
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push primary tag
      id: build_image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: ${{ secrets.DOCKER_USERNAME }}/axecollection:${{ steps.docker_tags.outputs.tags }}
        provenance: false
        sbom: false
    
    - name: Tag SHA via digest
      if: ${{ success() && steps.build_image.outputs.digest != '' }}
      shell: bash
      run: |
        set -e
        DIGEST="${{ steps.build_image.outputs.digest }}"
        echo "Digest: $DIGEST"
        for i in 1 2 3; do
          docker buildx imagetools create \
            -t "${{ secrets.DOCKER_USERNAME }}/axecollection:${{ steps.docker_tags.outputs.sha_tag }}" \
            "${{ secrets.DOCKER_USERNAME }}/axecollection@${DIGEST}" && break || { echo "Retry $i/3"; sleep 10; }
        done
        

